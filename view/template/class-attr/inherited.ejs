<% layout(_view.get(_layout)) %>
<% block('title', 'Class attribute') %>
<%
const columnTemplate = _view.get('_part/group/columns');
const overriddenTemplate = _view.get('_part/attr/overridden');
const relationTemplate = _view.get('_part/attr/relation');
const staticTemplate = _view.get('_part/attr/static');

const tabs = [{
    id: 'Main',
    content: _view.getInternalTemplate('_tabInheritedMain')
}];
if (model.isRelation() || model.isUser()) {
    tabs.push({
        id: 'Relation',
        content: _view.getInternalTemplate('_tabInheritedRelation')
    });
}
tabs.push({
    id: 'Validation',
    content: {
        template: relationTemplate,
        attr: 'rules',
        data: {
            columns: [{
                name: 'type'
            }, {
                name: 'param'
            }, {
                name: 'orderNumber'
            }],
            order: {orderNumber: 1},
            link: null,
            unlink: null,
            modalSort: true
        }
    }
}, {
    id: 'Action binder',
    content: {
        template: relationTemplate,
        attr: 'actionBinder',
        css: 'no-label',
        data: {
            columns: [{
                name: 'show'
            }, {
                name: 'require'
            }, {
                name: 'enable'
            }, {
                name: 'value'
            }],
            link: null,
            unlink: null
        }
    }
});
%>
<%- include(columnTemplate, {
    items: [{
        template: staticTemplate,
        params: {
            attr: 'original',
            displayValue: model.getRelatedTitle('original'),
            url: ['update', model.rel('original')]
        }
    }, {
        template: staticTemplate,
        params: {
            attr: 'class',
            displayValue: model.getRelatedTitle('class'),
            url: ['class/update', {id: model.get('class')}]
        }
    }]
}) %>

<%- include(overriddenTemplate, {
    attr: 'label',
    template: _view.get('_part/attr/string')
}) %>

<%- include(columnTemplate, {
    items: [{
        template: staticTemplate,
        params: {
            attr: 'type',
            displayValue: model.getAttrValueLabel('type')
        }
    }, {
        template: overriddenTemplate,
        params: {
            attr: 'viewType',
            template: _view.get('_part/attr/enum'),
            params: {
                sets: model.TYPE_ENUMS
            }
        }
    }]
}) %>

<%- include(_view.get('_part/group/tabs'), {items: tabs}) %>