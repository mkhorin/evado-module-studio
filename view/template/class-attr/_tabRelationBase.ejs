<%
const attrUpdate = _url('class-attr/update');
const columnTemplate = _view.get('_part/group/columns');
const enumTemplate = _view.get('_part/attr/enum');
const selectTemplate = _view.get('_part/attr/select');
const typeTrigger = ['START TRIGGER', 'type'];
const refTypeTrigger = ['AND', {type: 'ref'}, typeTrigger];
const backrefTypeTrigger = ['AND', {type: 'backref'}, typeTrigger];
%>

<%- include(columnTemplate, {
    items: [{
        template: selectTemplate,
        params: {
            attr: 'refClass',
            extHint: 'Class of related objects',
            items: null,
            displayValue: model.getRelatedTitle('refClass'),
            select2: {ajax: {url: _url('class/list-select')}},
            update: _url('class/update'),
            actionBinder: {require: {type: ['ref', 'backref']}}
        }
    }, {
        template: _view.get('_part/attr/checkbox'),
        params: {
            attr: 'multiple',
            hint: 'Many related objects are possible',
            actionBinder: {value: [[true, backrefTypeTrigger], [false, refTypeTrigger]]}
        }
    }]
}) %>

<%- include(columnTemplate, {
    items: [{
        template: selectTemplate,
        params: {
            attr: 'refAttr',
            displayValue: model.getRelatedTitle('refAttr'),
            extHint: 'Key attribute is used for empty value',
            items: null,
            select2: {ajax: {url: _url('class-attr/list-select')}},
            depends: [{attr: 'refClass', param: 'pid'}],
            update: attrUpdate,
            actionBinder: {enable: ['NOT EMPTY', 'refClass']}
        }
    },{
        template: selectTemplate,
        params: {
            attr: 'linkAttr',
            displayValue: model.getRelatedTitle('linkAttr'),
            extHint: 'Current attribute is used for empty value',
            items: null,
            select2: {
                ajax: {url: _url('class-attr/list-select')},
                queryData: {pid: model.get('class')}
            },
            update: attrUpdate
        }
    }]
}) %>

<%- include(columnTemplate, {
    items: [{
        template: enumTemplate,
        params: {
            attr: 'onDelete',
            extHint: 'On delete reference class instance:\nCascade - delete relation owner instance\nNull - empty linked attribute value',
            sets: model.RELATED_ACTION_ENUMS,
            actionBinder: {value: [['null', refTypeTrigger], ['', backrefTypeTrigger]]}
        }
    }, {
        template: enumTemplate,
        params: {
            attr: 'onUpdate',
            extHint: 'On update reference class instance:\nCascade - update linked attribute value\nNull - empty linked attribute value',
            sets: model.RELATED_ACTION_ENUMS
        }
    }]
}) %>

<%- include(_view.get('_part/attr/checkList'), {
    attr: 'commands',
    items: model.COMMAND_VALUE_LABELS
}) %>